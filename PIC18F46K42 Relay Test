C SCRIPTS:

#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
//#include "C:/Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4

//hand away from PR, low logic
//hand near PR, high logic
// (0:PR0) (1:PR1) (2:enterbut) (3:errorled) (4:relaysig) (5:enableswitch)
// error: does not turn off enableLED

int codeCount =0;
int enterKey=0;
int tryCount=0;
int SECRET_CODE = 17;
int enableSwitch;
int enableHold;

void blinkled() {
	for (int a=0;a<3;a++) {
		PORTAbits.RA3=1;
		//__delay_ms(500);
		PORTAbits.RA3=0;
		//__delay_ms(500);
	}
}

unsigned char hex2bcd (unsigned char x)
{
    unsigned char y;
    y = (x / 10) << 4;
    y = y | (x % 10);
    return (y);
}

void main(void) {
	PORTA=0x00;
	LATA=0x00;
	ANSELA=0x00;
	TRISA=0b00100111;

	PORTC=0x00;
	LATC=0x00;
	ANSELC=0x00;
	TRISC=0x00;
    
    enterKey=0;
    codeCount=0;
    tryCount=0;
    // if enable button is off before enter is pressed, the program will continue 
    //[add enableHold ==1 near enterkey check and enableHold == 1 near codecheck]
	//0z41 how do we continuously check the enableswitch? We need a while loop checking the value continously but we cannot use the switch value directly because it's not a hold requirement. So we need to make an extra variable and then whenever the enable button is pressed that value is inverted.
    // add additional enableHold==1 {line 115}...if blinkled(line 150)...set enterKey to 0(line 155)...TRISC=0 (line 95)
    //...add catch while for enterKey (line 153)...
    // set A4 to 0, output(line 90)...
    __label__enablecheck:
	while(enableHold == 0) { //does the circuit start at 0 by default)
		PORTAbits.RA3=0;
		enableHold=PORTAbits.RA5;
    }
		
		PORTAbits.RA3=1;
		while (PORTAbits.RA2 == 0 & enableHold == 1) { //enterKey == 0

			if (PORTAbits.RA0 == 0) { //PR0 is low
				codeCount += 16;
				tryCount+=1;
				PORTC = hex2bcd(tryCount);
				if (tryCount == 5) { //maybe make it <5
				codeCount = 0;
                }
			} //maybe make else or to not confused the circuit
			if (PORTAbits.RA1 == 0) { //PR1 is low
				codeCount += 1;
				tryCount+=1;
				PORTC = hex2bcd(tryCount);
				if (tryCount == 5) { //maybe make it <5
				codeCount = 0;
                }
			}

			while (!(PORTAbits.RA0 == 1 & PORTAbits.RA1 == 1 )) {
			}
	
		}
	
		if (codeCount == SECRET_CODE) {
			PORTAbits.RA4 = 1; //output high to relay, IN1
			__delay_ms(1000);
			PORTAbits.RA4 =0;
			tryCount=0;
			codeCount=0;
			PORTC=0;
		}else{
			tryCount =0;
			codeCount=0;
			PORTC=0;
            if (enableHold == 1){
                blinkled();
            }
		}
	
        while (PORTAbits.RA2 == 1){ //if enterKey is enabled, stay here
        }
	goto __label__enablecheck;
}



